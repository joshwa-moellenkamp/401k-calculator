{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Calculate","props","i","data","totalEmployeeContribution","totalEmployerContribution","totalInterest","balance","initialBalance","years","interest","interestRate","employeeContribution","employerContribution","dataEntry","key","push","StyleCurrency","Table","style","tableLayout","TableHead","TableRow","TableCell","TableBody","map","align","value","isNaN","toLocaleString","undefined","currency","minimumFractionDigits","maximumFractionDigits","Calculator","width","border","type","onChange","handleInitialBalanceChange","handleEmployeeContributionChange","handleEmployerContributionChange","handleInterestRateChange","handleYearsChange","App","event","setState","parseFloat","target","state","className","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9b3659a2.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport Table from \"@material-ui/core/Table\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      initialBalance: 0.0,\n      employeeContribution: 0.0,\n      employerContribution: 0.0,\n      interestRate: 7.0,\n      years: 10,\n      balance: 0.0\n    };\n  }\n\n  handleInitialBalanceChange = event => {\n    this.setState({ initialBalance: parseFloat(event.target.value) });\n  };\n\n  handleEmployeeContributionChange = event => {\n    this.setState({ employeeContribution: parseFloat(event.target.value) });\n  };\n\n  handleEmployerContributionChange = event => {\n    this.setState({ employerContribution: parseFloat(event.target.value) });\n  };\n\n  handleInterestRateChange = event => {\n    this.setState({ interestRate: parseFloat(event.target.value) });\n  };\n\n  handleYearsChange = event => {\n    this.setState({ years: parseFloat(event.target.value) });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h3>401k Calculator</h3>\n        <p>\n          Configure the yearly contribution for employee and employer, predicted\n          interest return, number of years, and compounding method to predict\n          financial independence.\n        </p>\n        <Calculator\n          handleInitialBalanceChange={\n            this.handleInitialBalanceChange\n          }\n          handleEmployeeContributionChange={\n            this.handleEmployeeContributionChange\n          }\n          handleEmployerContributionChange={\n            this.handleEmployerContributionChange\n          }\n          handleInterestRateChange={this.handleInterestRateChange}\n          handleYearsChange={this.handleYearsChange}\n          interestRate={this.state.interestRate}\n          years={this.state.years}\n        />\n        <Calculate\n          employeeContribution={this.state.employeeContribution}\n          employerContribution={this.state.employerContribution}\n          interestRate={this.state.interestRate}\n          years={this.state.years}\n          initialBalance={this.state.initialBalance}\n        />\n        {/* <Display\n          contribution={this.state.contribution}\n          interestRate={this.state.interestRate}\n          years={this.state.years}\n        /> */}\n      </div>\n    );\n  }\n}\n\nfunction Calculate(props) {\n  let data = [];\n  let totalEmployeeContribution = 0.0;\n  let totalEmployerContribution = 0.0;\n  let totalInterest = 0.0;\n\n  let i;\n  let balance = props.initialBalance;\n  for (i = 1; i <= props.years; i++) {\n    const interest = balance * (0.01 * props.interestRate);\n    balance =\n      balance +\n      interest +\n      props.employeeContribution +\n      props.employerContribution;\n\n    // collect data for table display\n    totalEmployeeContribution =\n      totalEmployeeContribution + props.employeeContribution;\n    totalEmployerContribution =\n      totalEmployerContribution + props.employerContribution;\n    totalInterest = totalInterest + interest;\n\n    let dataEntry = {};\n    dataEntry.key = i;\n    dataEntry.employeeContribution = props.employeeContribution;\n    dataEntry.employerContribution = props.employerContribution;\n    dataEntry.totalEmployeeContribution = totalEmployeeContribution;\n    dataEntry.totalEmployerContribution = totalEmployerContribution;\n    dataEntry.totalInterest = totalInterest;\n    dataEntry.balance = dataEntry.balance || 0 + balance;\n    data.push(dataEntry);\n  }\n\n  return (\n    <div>\n      <h3>Balance: {StyleCurrency(balance)}</h3>\n\n      <Table style={{ tableLayout: \"auto\" }}>\n        <TableHead>\n          <TableRow>\n            <TableCell>Year</TableCell>\n            <TableCell>Total Employee Contribution</TableCell>\n            <TableCell>Total Employer Contribution</TableCell>\n            <TableCell>Total Interest Earned</TableCell>\n            <TableCell>Total Balance</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {data.map(dataEntry => (\n            <TableRow key={dataEntry.key}>\n              <TableCell>{dataEntry.key}</TableCell>\n              <TableCell align=\"right\">\n                {StyleCurrency(dataEntry.totalEmployeeContribution)}\n              </TableCell>\n              <TableCell align=\"right\">\n                {StyleCurrency(dataEntry.totalEmployerContribution)}\n              </TableCell>\n              <TableCell align=\"right\">\n                {StyleCurrency(dataEntry.totalInterest)}\n              </TableCell>\n              <TableCell align=\"right\">\n                {StyleCurrency(dataEntry.balance)}\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </div>\n  );\n}\n\nfunction StyleCurrency(value) {\n  if (isNaN(value)) {\n    return \"\";\n  } else {\n    return value.toLocaleString(undefined, {\n      style: \"currency\",\n      currency: \"USD\",\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2\n    });\n  }\n}\n\nfunction Display(props) {\n  return (\n    <div>\n      <h5>Contribution: {StyleCurrency(props.contribution)}</h5>\n      <h5>Interest Rate: {props.interestRate}%</h5>\n      <h5>Years: {props.years}</h5>\n    </div>\n  );\n}\n\nfunction Calculator(props) {\n  return (\n    <div>\n      <Table style={{ tableLayout: \"auto\" }}>\n        <TableHead>\n          <TableRow>\n            <TableCell style={{ width: \"50%\", border: \"none\" }}></TableCell>\n            <TableCell style={{ width: \"50%\", border: \"none\" }}></TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          <TableRow>\n            <TableCell align=\"right\" style={{ border: \"none\" }}>\n              <label>Initial Balance</label>\n            </TableCell>\n            <TableCell style={{ border: \"none\" }}>\n              <input\n                type=\"number\"\n                onChange={props.handleInitialBalanceChange}\n              />\n            </TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell align=\"right\" style={{ border: \"none\" }}>\n              <label>Employee Contribution (Yearly)</label>\n            </TableCell>\n            <TableCell style={{ border: \"none\" }}>\n              <input\n                type=\"number\"\n                onChange={props.handleEmployeeContributionChange}\n                value={props.employeeContribution}\n              />\n            </TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell align=\"right\" style={{ border: \"none\" }}>\n              <label>Employer Contribution (Yearly)</label>\n            </TableCell>\n            <TableCell style={{ border: \"none\" }}>\n              <input\n                type=\"number\"\n                onChange={props.handleEmployerContributionChange}\n                value={props.employerContribution}\n              />\n            </TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell align=\"right\" style={{ border: \"none\" }}>\n              <label>Interest Percentage</label>\n            </TableCell>\n            <TableCell style={{ border: \"none\" }}>\n              <input\n                type=\"number\"\n                onChange={props.handleInterestRateChange}\n                value={props.interestRate}\n              />\n            </TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell align=\"right\" style={{ border: \"none\" }}>\n              <label>Years</label>\n            </TableCell>\n            <TableCell style={{ border: \"none\" }}>\n              <input\n                type=\"number\"\n                onChange={props.handleYearsChange}\n                value={props.years}\n              />\n            </TableCell>\n          </TableRow>\n        </TableBody>\n      </Table>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}